// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace auth {
PROTOBUF_CONSTEXPR SendCodeRequest::SendCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendCodeRequestDefaultTypeInternal() {}
  union {
    SendCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendCodeRequestDefaultTypeInternal _SendCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR SendCodeResponse::SendCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendCodeResponseDefaultTypeInternal() {}
  union {
    SendCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendCodeResponseDefaultTypeInternal _SendCodeResponse_default_instance_;
PROTOBUF_CONSTEXPR VerifyCodeRequest::VerifyCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyCodeRequestDefaultTypeInternal() {}
  union {
    VerifyCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyCodeRequestDefaultTypeInternal _VerifyCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR VerifyCodeResponse::VerifyCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyCodeResponseDefaultTypeInternal() {}
  union {
    VerifyCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyCodeResponseDefaultTypeInternal _VerifyCodeResponse_default_instance_;
}  // namespace auth
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_auth_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_auth_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_auth_2eproto = nullptr;

const uint32_t TableStruct_auth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::SendCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::SendCodeRequest, _impl_.public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::SendCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::SendCodeResponse, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::VerifyCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::VerifyCodeRequest, _impl_.public_key_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::VerifyCodeRequest, _impl_.sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::VerifyCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::VerifyCodeResponse, _impl_.near_account_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::auth::SendCodeRequest)},
  { 7, -1, -1, sizeof(::game::battlemon::auth::SendCodeResponse)},
  { 14, -1, -1, sizeof(::game::battlemon::auth::VerifyCodeRequest)},
  { 22, -1, -1, sizeof(::game::battlemon::auth::VerifyCodeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::auth::_SendCodeRequest_default_instance_._instance,
  &::game::battlemon::auth::_SendCodeResponse_default_instance_._instance,
  &::game::battlemon::auth::_VerifyCodeRequest_default_instance_._instance,
  &::game::battlemon::auth::_VerifyCodeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_auth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nauth.proto\022\023game.battlemon.auth\"%\n\017Sen"
  "dCodeRequest\022\022\n\npublic_key\030\001 \001(\t\" \n\020Send"
  "CodeResponse\022\014\n\004code\030\001 \001(\t\"5\n\021VerifyCode"
  "Request\022\022\n\npublic_key\030\001 \001(\t\022\014\n\004sign\030\002 \001("
  "\t\"-\n\022VerifyCodeResponse\022\027\n\017near_account_"
  "id\030\001 \001(\t2\305\001\n\013AuthService\022W\n\010SendCode\022$.g"
  "ame.battlemon.auth.SendCodeRequest\032%.gam"
  "e.battlemon.auth.SendCodeResponse\022]\n\nVer"
  "ifyCode\022&.game.battlemon.auth.VerifyCode"
  "Request\032\'.game.battlemon.auth.VerifyCode"
  "ResponseB\nZ\010servicesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_auth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_auth_2eproto = {
    false, false, 428, descriptor_table_protodef_auth_2eproto,
    "auth.proto",
    &descriptor_table_auth_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_auth_2eproto::offsets,
    file_level_metadata_auth_2eproto, file_level_enum_descriptors_auth_2eproto,
    file_level_service_descriptors_auth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_auth_2eproto_getter() {
  return &descriptor_table_auth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_auth_2eproto(&descriptor_table_auth_2eproto);
namespace game {
namespace battlemon {
namespace auth {

// ===================================================================

class SendCodeRequest::_Internal {
 public:
};

SendCodeRequest::SendCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.auth.SendCodeRequest)
}
SendCodeRequest::SendCodeRequest(const SendCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.auth.SendCodeRequest)
}

inline void SendCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendCodeRequest::~SendCodeRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.auth.SendCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
}

void SendCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.auth.SendCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.SendCodeRequest.public_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.auth.SendCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.SendCodeRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.auth.SendCodeRequest)
  return target;
}

size_t SendCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.auth.SendCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendCodeRequest::GetClassData() const { return &_class_data_; }


void SendCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendCodeRequest*>(&to_msg);
  auto& from = static_cast<const SendCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.auth.SendCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendCodeRequest::CopyFrom(const SendCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.auth.SendCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCodeRequest::IsInitialized() const {
  return true;
}

void SendCodeRequest::InternalSwap(SendCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[0]);
}

// ===================================================================

class SendCodeResponse::_Internal {
 public:
};

SendCodeResponse::SendCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.auth.SendCodeResponse)
}
SendCodeResponse::SendCodeResponse(const SendCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.auth.SendCodeResponse)
}

inline void SendCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendCodeResponse::~SendCodeResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.auth.SendCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void SendCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.auth.SendCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.SendCodeResponse.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.auth.SendCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.SendCodeResponse.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.auth.SendCodeResponse)
  return target;
}

size_t SendCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.auth.SendCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendCodeResponse::GetClassData() const { return &_class_data_; }


void SendCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendCodeResponse*>(&to_msg);
  auto& from = static_cast<const SendCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.auth.SendCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendCodeResponse::CopyFrom(const SendCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.auth.SendCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCodeResponse::IsInitialized() const {
  return true;
}

void SendCodeResponse::InternalSwap(SendCodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[1]);
}

// ===================================================================

class VerifyCodeRequest::_Internal {
 public:
};

VerifyCodeRequest::VerifyCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.auth.VerifyCodeRequest)
}
VerifyCodeRequest::VerifyCodeRequest(const VerifyCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.sign_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.auth.VerifyCodeRequest)
}

inline void VerifyCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.sign_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyCodeRequest::~VerifyCodeRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.auth.VerifyCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.sign_.Destroy();
}

void VerifyCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.auth.VerifyCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.VerifyCodeRequest.public_key"));
        } else
          goto handle_unusual;
        continue;
      // string sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.VerifyCodeRequest.sign"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.auth.VerifyCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.VerifyCodeRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // string sign = 2;
  if (!this->_internal_sign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.VerifyCodeRequest.sign");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.auth.VerifyCodeRequest)
  return target;
}

size_t VerifyCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.auth.VerifyCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyCodeRequest::GetClassData() const { return &_class_data_; }


void VerifyCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyCodeRequest*>(&to_msg);
  auto& from = static_cast<const VerifyCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.auth.VerifyCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyCodeRequest::CopyFrom(const VerifyCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.auth.VerifyCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyCodeRequest::IsInitialized() const {
  return true;
}

void VerifyCodeRequest::InternalSwap(VerifyCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[2]);
}

// ===================================================================

class VerifyCodeResponse::_Internal {
 public:
};

VerifyCodeResponse::VerifyCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.auth.VerifyCodeResponse)
}
VerifyCodeResponse::VerifyCodeResponse(const VerifyCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_account_id().empty()) {
    _this->_impl_.near_account_id_.Set(from._internal_near_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.auth.VerifyCodeResponse)
}

inline void VerifyCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyCodeResponse::~VerifyCodeResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.auth.VerifyCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_account_id_.Destroy();
}

void VerifyCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.auth.VerifyCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.VerifyCodeResponse.near_account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.auth.VerifyCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_account_id = 1;
  if (!this->_internal_near_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_account_id().data(), static_cast<int>(this->_internal_near_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.VerifyCodeResponse.near_account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.auth.VerifyCodeResponse)
  return target;
}

size_t VerifyCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.auth.VerifyCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_account_id = 1;
  if (!this->_internal_near_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyCodeResponse::GetClassData() const { return &_class_data_; }


void VerifyCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyCodeResponse*>(&to_msg);
  auto& from = static_cast<const VerifyCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.auth.VerifyCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_account_id().empty()) {
    _this->_internal_set_near_account_id(from._internal_near_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyCodeResponse::CopyFrom(const VerifyCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.auth.VerifyCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyCodeResponse::IsInitialized() const {
  return true;
}

void VerifyCodeResponse::InternalSwap(VerifyCodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_account_id_, lhs_arena,
      &other->_impl_.near_account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::auth::SendCodeRequest*
Arena::CreateMaybeMessage< ::game::battlemon::auth::SendCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::auth::SendCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::auth::SendCodeResponse*
Arena::CreateMaybeMessage< ::game::battlemon::auth::SendCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::auth::SendCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::auth::VerifyCodeRequest*
Arena::CreateMaybeMessage< ::game::battlemon::auth::VerifyCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::auth::VerifyCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::auth::VerifyCodeResponse*
Arena::CreateMaybeMessage< ::game::battlemon::auth::VerifyCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::auth::VerifyCodeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
